functions:
- id: aws-cli
  image: gcr.io/direktiv/apps/aws-cli:1.0
  type: knative-workflow
- id: git
  image: gcr.io/direktiv/apps/git:1.0
  type: knative-workflow
- id: terraform
  image: gcr.io/direktiv/apps/terraform:1.0
  type: knative-workflow

states:

# theiw flow needs a name for the instance and an owner
- id: validate-input
  type: validate
  schema:
    title: New Nginx Server
    type: object
    required: ["name", "owner"]
    properties:
      name:
        type: string
      owner:
        type: string
        format: email
        title: Owner
  transition: clone-tf

# clone the terrafrom project
- id: clone-tf
  type: action
  action:
    function: git
    input: 
      commands:
      - command: git clone https://github.com/jensg-st/devops out/workflow/devops
  transition: setup

# running terrafrom to create
- id: setup
  type: action
  action:
    function: terraform
    secrets: ["awsacess", "awssecret"]
    files:
    - key: devops
      scope: workflow
      type: tar.gz
    input:
      variables:
       - name: instance
         value: jq(.name)
      commands:
      - command: sed -i s/REPLACE/jq(.name)/g devops/terraform/backend.hcl
      - command: cat devops/terraform/backend.hcl
      - command: terraform -chdir=devops/terraform init -backend-config=backend.hcl
      - command: terraform -chdir=devops/terraform apply -auto-approve
      - command: terraform -chdir=devops/terraform output -json
      envs:
      - name: AWS_ACCESS_KEY_ID
        value: jq(.secrets.awsacess)
      - name: AWS_SECRET_ACCESS_KEY
        value: jq(.secrets.awssecret)
  transform:
    name: jq(.name)
    info: jq(.return.terraform[4].result)

