# creates or deletes nginx instances with terraform
#
# example Commands if called with direktiv-sync:
# 
# creating Instances:
# echo '{ "action": "create", "name": "mynginx" }' | direktiv-sync exec nginx.yaml
#
# deleting Instances:
# echo '{ "action": "delete", "name": "mynginx" }' | direktiv-sync exec nginx.yaml

functions:
- id: nginx-destroy
  workflow: instances/delete
  type: subflow
- id: nginx-create
  workflow: instances/create
  type: subflow

# utility functions
- id: slack
  workflow: utility/slack
  type: subflow
- id: mail
  workflow: utility/mail
  type: subflow

states:

# the basic flow requires a name and an action (create or delete)
- id: validate-input
  type: validate  
  schema:
    title: New Nginx Server
    type: object
    required: ["name", "action"]
    properties:
      name:
        title: Name
        type: string
      action:
        type: string
        enum: ["create", "delete"]
        default: create
        title: Action
  transition: decider


# decides which path we are taking for delete or create
- id: decider
  type: switch
  conditions:
  - condition: jq(if (.action == "delete") then true else false end)
    transition: execute-delete
  defaultTransition: execute-create

# create action
- id: execute-create
  type: action  
  async: true
  log: Creating nginx jq(.name)
  action:
    function: nginx-create
    input:
      name: jq(.name)
  transition: wait-for-result

# delete action
- id: execute-delete
  type: action
  async: true
  log: Deleting nginx jq(.name)
  action:
    function: nginx-destroy
    input:
      name: jq(.name)
  transition: wait-for-result

# both routes are generate an event of the same type
# the context provides information like succesful or not
# ip addresses and name
- id: wait-for-result
  type: consumeEvent
  timeout: PT15M
  event:
    type: io.direktiv.nginx
    context:
      name: jq(.name)
  catch:
  - error: "direktiv.stateTimeout"
    transition: handle-timeout
  transition: inform

# call slack and email in parallel
- id: inform
  type: parallel
  mode: and
  actions:
  - function: slack
    input: 
      message: jq(."io.direktiv.nginx".message)
  - function: mail
    input: 
      message: jq(."io.direktiv.nginx".message)
  transform: jq( del(.return) )

# this is the timeout handler
# in real life this would delete the instance 
# just in case and other cleranup tasks
- id: handle-timeout
  type: noop
  log: That did not work at all!
